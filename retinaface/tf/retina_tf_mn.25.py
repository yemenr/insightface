import tensorflow as tf
import pdb

__weights_dict = dict()

is_train = False

def load_weights(weight_file):
    import numpy as np

    if weight_file == None:
        return

    try:
        weights_dict = np.load(weight_file, allow_pickle=True).item()
    except:
        weights_dict = np.load(weight_file, allow_pickle=True, encoding='bytes').item()

    return weights_dict


def KitModel(weight_file = None):
    global __weights_dict
    __weights_dict = load_weights(weight_file)

    data            = tf.placeholder(tf.float32, shape = (None, None, None, 3), name = 'data')
    mobilenet0_conv0_fwd_pad = tf.pad(data, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv0_fwd = convolution(mobilenet0_conv0_fwd_pad, group=1, strides=[2, 2], padding='VALID', name='mobilenet0_conv0_fwd')
    mobilenet0_batchnorm0_fwd = batch_normalization(mobilenet0_conv0_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm0_fwd')
    mobilenet0_relu0_fwd = tf.nn.relu(mobilenet0_batchnorm0_fwd, name = 'mobilenet0_relu0_fwd')
    mobilenet0_conv1_fwd_pad = tf.pad(mobilenet0_relu0_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv1_fwd = depthwise_convolution(mobilenet0_conv1_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv1_fwd')
    mobilenet0_batchnorm1_fwd = batch_normalization(mobilenet0_conv1_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm1_fwd')
    mobilenet0_relu1_fwd = tf.nn.relu(mobilenet0_batchnorm1_fwd, name = 'mobilenet0_relu1_fwd')
    mobilenet0_conv2_fwd = convolution(mobilenet0_relu1_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv2_fwd')
    mobilenet0_batchnorm2_fwd = batch_normalization(mobilenet0_conv2_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm2_fwd')
    mobilenet0_relu2_fwd = tf.nn.relu(mobilenet0_batchnorm2_fwd, name = 'mobilenet0_relu2_fwd')
    mobilenet0_conv3_fwd_pad = tf.pad(mobilenet0_relu2_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv3_fwd = depthwise_convolution(mobilenet0_conv3_fwd_pad, strides = [1, 2, 2, 1], padding = 'VALID', name = 'mobilenet0_conv3_fwd')
    mobilenet0_batchnorm3_fwd = batch_normalization(mobilenet0_conv3_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm3_fwd')
    mobilenet0_relu3_fwd = tf.nn.relu(mobilenet0_batchnorm3_fwd, name = 'mobilenet0_relu3_fwd')
    mobilenet0_conv4_fwd = convolution(mobilenet0_relu3_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv4_fwd')
    mobilenet0_batchnorm4_fwd = batch_normalization(mobilenet0_conv4_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm4_fwd')
    mobilenet0_relu4_fwd = tf.nn.relu(mobilenet0_batchnorm4_fwd, name = 'mobilenet0_relu4_fwd')
    mobilenet0_conv5_fwd_pad = tf.pad(mobilenet0_relu4_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv5_fwd = depthwise_convolution(mobilenet0_conv5_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv5_fwd')
    mobilenet0_batchnorm5_fwd = batch_normalization(mobilenet0_conv5_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm5_fwd')
    mobilenet0_relu5_fwd = tf.nn.relu(mobilenet0_batchnorm5_fwd, name = 'mobilenet0_relu5_fwd')
    mobilenet0_conv6_fwd = convolution(mobilenet0_relu5_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv6_fwd')
    mobilenet0_batchnorm6_fwd = batch_normalization(mobilenet0_conv6_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm6_fwd')
    mobilenet0_relu6_fwd = tf.nn.relu(mobilenet0_batchnorm6_fwd, name = 'mobilenet0_relu6_fwd')
    mobilenet0_conv7_fwd_pad = tf.pad(mobilenet0_relu6_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv7_fwd = depthwise_convolution(mobilenet0_conv7_fwd_pad, strides = [1, 2, 2, 1], padding = 'VALID', name = 'mobilenet0_conv7_fwd')
    mobilenet0_batchnorm7_fwd = batch_normalization(mobilenet0_conv7_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm7_fwd')
    mobilenet0_relu7_fwd = tf.nn.relu(mobilenet0_batchnorm7_fwd, name = 'mobilenet0_relu7_fwd')
    mobilenet0_conv8_fwd = convolution(mobilenet0_relu7_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv8_fwd')
    mobilenet0_batchnorm8_fwd = batch_normalization(mobilenet0_conv8_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm8_fwd')
    mobilenet0_relu8_fwd = tf.nn.relu(mobilenet0_batchnorm8_fwd, name = 'mobilenet0_relu8_fwd')
    mobilenet0_conv9_fwd_pad = tf.pad(mobilenet0_relu8_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv9_fwd = depthwise_convolution(mobilenet0_conv9_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv9_fwd')
    mobilenet0_batchnorm9_fwd = batch_normalization(mobilenet0_conv9_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm9_fwd')
    mobilenet0_relu9_fwd = tf.nn.relu(mobilenet0_batchnorm9_fwd, name = 'mobilenet0_relu9_fwd')
    mobilenet0_conv10_fwd = convolution(mobilenet0_relu9_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv10_fwd')
    mobilenet0_batchnorm10_fwd = batch_normalization(mobilenet0_conv10_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm10_fwd')
    mobilenet0_relu10_fwd = tf.nn.relu(mobilenet0_batchnorm10_fwd, name = 'mobilenet0_relu10_fwd')
    mobilenet0_conv11_fwd_pad = tf.pad(mobilenet0_relu10_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv11_fwd = depthwise_convolution(mobilenet0_conv11_fwd_pad, strides = [1, 2, 2, 1], padding = 'VALID', name = 'mobilenet0_conv11_fwd')
    rf_c1_red_conv  = convolution(mobilenet0_relu10_fwd, group=1, strides=[1, 1], padding='VALID', name='rf_c1_red_conv')
    mobilenet0_batchnorm11_fwd = batch_normalization(mobilenet0_conv11_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm11_fwd')
    rf_c1_red_conv_bn = batch_normalization(rf_c1_red_conv, variance_epsilon=1.9999999494757503e-05, name='rf_c1_red_conv_bn')
    mobilenet0_relu11_fwd = tf.nn.relu(mobilenet0_batchnorm11_fwd, name = 'mobilenet0_relu11_fwd')
    rf_c1_red_conv_relu = tf.nn.relu(rf_c1_red_conv_bn, name = 'rf_c1_red_conv_relu')
    mobilenet0_conv12_fwd = convolution(mobilenet0_relu11_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv12_fwd')
    mobilenet0_batchnorm12_fwd = batch_normalization(mobilenet0_conv12_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm12_fwd')
    mobilenet0_relu12_fwd = tf.nn.relu(mobilenet0_batchnorm12_fwd, name = 'mobilenet0_relu12_fwd')
    mobilenet0_conv13_fwd_pad = tf.pad(mobilenet0_relu12_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv13_fwd = depthwise_convolution(mobilenet0_conv13_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv13_fwd')
    mobilenet0_batchnorm13_fwd = batch_normalization(mobilenet0_conv13_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm13_fwd')
    mobilenet0_relu13_fwd = tf.nn.relu(mobilenet0_batchnorm13_fwd, name = 'mobilenet0_relu13_fwd')
    mobilenet0_conv14_fwd = convolution(mobilenet0_relu13_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv14_fwd')
    mobilenet0_batchnorm14_fwd = batch_normalization(mobilenet0_conv14_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm14_fwd')
    mobilenet0_relu14_fwd = tf.nn.relu(mobilenet0_batchnorm14_fwd, name = 'mobilenet0_relu14_fwd')
    mobilenet0_conv15_fwd_pad = tf.pad(mobilenet0_relu14_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv15_fwd = depthwise_convolution(mobilenet0_conv15_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv15_fwd')
    mobilenet0_batchnorm15_fwd = batch_normalization(mobilenet0_conv15_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm15_fwd')
    mobilenet0_relu15_fwd = tf.nn.relu(mobilenet0_batchnorm15_fwd, name = 'mobilenet0_relu15_fwd')
    mobilenet0_conv16_fwd = convolution(mobilenet0_relu15_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv16_fwd')
    mobilenet0_batchnorm16_fwd = batch_normalization(mobilenet0_conv16_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm16_fwd')
    mobilenet0_relu16_fwd = tf.nn.relu(mobilenet0_batchnorm16_fwd, name = 'mobilenet0_relu16_fwd')
    mobilenet0_conv17_fwd_pad = tf.pad(mobilenet0_relu16_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv17_fwd = depthwise_convolution(mobilenet0_conv17_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv17_fwd')
    mobilenet0_batchnorm17_fwd = batch_normalization(mobilenet0_conv17_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm17_fwd')
    mobilenet0_relu17_fwd = tf.nn.relu(mobilenet0_batchnorm17_fwd, name = 'mobilenet0_relu17_fwd')
    mobilenet0_conv18_fwd = convolution(mobilenet0_relu17_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv18_fwd')
    mobilenet0_batchnorm18_fwd = batch_normalization(mobilenet0_conv18_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm18_fwd')
    mobilenet0_relu18_fwd = tf.nn.relu(mobilenet0_batchnorm18_fwd, name = 'mobilenet0_relu18_fwd')
    mobilenet0_conv19_fwd_pad = tf.pad(mobilenet0_relu18_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv19_fwd = depthwise_convolution(mobilenet0_conv19_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv19_fwd')
    mobilenet0_batchnorm19_fwd = batch_normalization(mobilenet0_conv19_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm19_fwd')
    mobilenet0_relu19_fwd = tf.nn.relu(mobilenet0_batchnorm19_fwd, name = 'mobilenet0_relu19_fwd')
    mobilenet0_conv20_fwd = convolution(mobilenet0_relu19_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv20_fwd')
    mobilenet0_batchnorm20_fwd = batch_normalization(mobilenet0_conv20_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm20_fwd')
    mobilenet0_relu20_fwd = tf.nn.relu(mobilenet0_batchnorm20_fwd, name = 'mobilenet0_relu20_fwd')
    mobilenet0_conv21_fwd_pad = tf.pad(mobilenet0_relu20_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv21_fwd = depthwise_convolution(mobilenet0_conv21_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv21_fwd')
    mobilenet0_batchnorm21_fwd = batch_normalization(mobilenet0_conv21_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm21_fwd')
    mobilenet0_relu21_fwd = tf.nn.relu(mobilenet0_batchnorm21_fwd, name = 'mobilenet0_relu21_fwd')
    mobilenet0_conv22_fwd = convolution(mobilenet0_relu21_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv22_fwd')
    mobilenet0_batchnorm22_fwd = batch_normalization(mobilenet0_conv22_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm22_fwd')
    mobilenet0_relu22_fwd = tf.nn.relu(mobilenet0_batchnorm22_fwd, name = 'mobilenet0_relu22_fwd')
    mobilenet0_conv23_fwd_pad = tf.pad(mobilenet0_relu22_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv23_fwd = depthwise_convolution(mobilenet0_conv23_fwd_pad, strides = [1, 2, 2, 1], padding = 'VALID', name = 'mobilenet0_conv23_fwd')
    rf_c2_lateral   = convolution(mobilenet0_relu22_fwd, group=1, strides=[1, 1], padding='VALID', name='rf_c2_lateral')
    mobilenet0_batchnorm23_fwd = batch_normalization(mobilenet0_conv23_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm23_fwd')
    rf_c2_lateral_bn = batch_normalization(rf_c2_lateral, variance_epsilon=1.9999999494757503e-05, name='rf_c2_lateral_bn')
    mobilenet0_relu23_fwd = tf.nn.relu(mobilenet0_batchnorm23_fwd, name = 'mobilenet0_relu23_fwd')
    rf_c2_lateral_relu = tf.nn.relu(rf_c2_lateral_bn, name = 'rf_c2_lateral_relu')
    mobilenet0_conv24_fwd = convolution(mobilenet0_relu23_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv24_fwd')
    mobilenet0_batchnorm24_fwd = batch_normalization(mobilenet0_conv24_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm24_fwd')
    mobilenet0_relu24_fwd = tf.nn.relu(mobilenet0_batchnorm24_fwd, name = 'mobilenet0_relu24_fwd')
    mobilenet0_conv25_fwd_pad = tf.pad(mobilenet0_relu24_fwd, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    mobilenet0_conv25_fwd = depthwise_convolution(mobilenet0_conv25_fwd_pad, strides = [1, 1, 1, 1], padding = 'VALID', name = 'mobilenet0_conv25_fwd')
    mobilenet0_batchnorm25_fwd = batch_normalization(mobilenet0_conv25_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm25_fwd')
    mobilenet0_relu25_fwd = tf.nn.relu(mobilenet0_batchnorm25_fwd, name = 'mobilenet0_relu25_fwd')
    mobilenet0_conv26_fwd = convolution(mobilenet0_relu25_fwd, group=1, strides=[1, 1], padding='VALID', name='mobilenet0_conv26_fwd')
    mobilenet0_batchnorm26_fwd = batch_normalization(mobilenet0_conv26_fwd, variance_epsilon=9.999999747378752e-06, name='mobilenet0_batchnorm26_fwd')
    mobilenet0_relu26_fwd = tf.nn.relu(mobilenet0_batchnorm26_fwd, name = 'mobilenet0_relu26_fwd')
    rf_c3_lateral   = convolution(mobilenet0_relu26_fwd, group=1, strides=[1, 1], padding='VALID', name='rf_c3_lateral')
    rf_c3_lateral_bn = batch_normalization(rf_c3_lateral, variance_epsilon=1.9999999494757503e-05, name='rf_c3_lateral_bn')
    rf_c3_lateral_relu = tf.nn.relu(rf_c3_lateral_bn, name = 'rf_c3_lateral_relu')
    rf_c3_det_conv1_pad = tf.pad(rf_c3_lateral_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c3_det_conv1 = convolution(rf_c3_det_conv1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c3_det_conv1')
    rf_c3_det_context_conv1_pad = tf.pad(rf_c3_lateral_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c3_det_context_conv1 = convolution(rf_c3_det_context_conv1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c3_det_context_conv1')
    rf_c3_upsampling = tf.keras.layers.UpSampling2D(size=(2, 2))(rf_c3_lateral_relu)
    rf_c3_det_conv1_bn = batch_normalization(rf_c3_det_conv1, variance_epsilon=1.9999999494757503e-05, name='rf_c3_det_conv1_bn')
    rf_c3_det_context_conv1_bn = batch_normalization(rf_c3_det_context_conv1, variance_epsilon=1.9999999494757503e-05, name='rf_c3_det_context_conv1_bn')
    crop0           = tf.strided_slice(rf_c3_upsampling, [0, 0, 0, 0], tf.shape(rf_c2_lateral_relu), [1, 1, 1, 1] , name='crop0')
    rf_c3_det_context_conv1_relu = tf.nn.relu(rf_c3_det_context_conv1_bn, name = 'rf_c3_det_context_conv1_relu')
    plus0           = rf_c2_lateral_relu + crop0
    rf_c3_det_context_conv2_pad = tf.pad(rf_c3_det_context_conv1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c3_det_context_conv2 = convolution(rf_c3_det_context_conv2_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c3_det_context_conv2')
    rf_c3_det_context_conv3_1_pad = tf.pad(rf_c3_det_context_conv1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c3_det_context_conv3_1 = convolution(rf_c3_det_context_conv3_1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c3_det_context_conv3_1')
    rf_c2_aggr_pad  = tf.pad(plus0, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c2_aggr      = convolution(rf_c2_aggr_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c2_aggr')
    rf_c3_det_context_conv2_bn = batch_normalization(rf_c3_det_context_conv2, variance_epsilon=1.9999999494757503e-05, name='rf_c3_det_context_conv2_bn')
    rf_c3_det_context_conv3_1_bn = batch_normalization(rf_c3_det_context_conv3_1, variance_epsilon=1.9999999494757503e-05, name='rf_c3_det_context_conv3_1_bn')
    rf_c2_aggr_bn   = batch_normalization(rf_c2_aggr, variance_epsilon=1.9999999494757503e-05, name='rf_c2_aggr_bn')
    rf_c3_det_context_conv3_1_relu = tf.nn.relu(rf_c3_det_context_conv3_1_bn, name = 'rf_c3_det_context_conv3_1_relu')
    rf_c2_aggr_relu = tf.nn.relu(rf_c2_aggr_bn, name = 'rf_c2_aggr_relu')
    rf_c3_det_context_conv3_2_pad = tf.pad(rf_c3_det_context_conv3_1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c3_det_context_conv3_2 = convolution(rf_c3_det_context_conv3_2_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c3_det_context_conv3_2')
    rf_c2_det_conv1_pad = tf.pad(rf_c2_aggr_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c2_det_conv1 = convolution(rf_c2_det_conv1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c2_det_conv1')
    rf_c2_det_context_conv1_pad = tf.pad(rf_c2_aggr_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c2_det_context_conv1 = convolution(rf_c2_det_context_conv1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c2_det_context_conv1')
    rf_c2_upsampling = tf.keras.layers.UpSampling2D(size=(2, 2))(rf_c2_aggr_relu)
    rf_c3_det_context_conv3_2_bn = batch_normalization(rf_c3_det_context_conv3_2, variance_epsilon=1.9999999494757503e-05, name='rf_c3_det_context_conv3_2_bn')
    rf_c2_det_conv1_bn = batch_normalization(rf_c2_det_conv1, variance_epsilon=1.9999999494757503e-05, name='rf_c2_det_conv1_bn')
    rf_c2_det_context_conv1_bn = batch_normalization(rf_c2_det_context_conv1, variance_epsilon=1.9999999494757503e-05, name='rf_c2_det_context_conv1_bn')
    crop1           = tf.strided_slice(rf_c2_upsampling, [0, 0, 0, 0], tf.shape(rf_c1_red_conv_relu), [1, 1, 1, 1] , name='crop1')
    rf_c3_det_concat = tf.concat([rf_c3_det_conv1_bn, rf_c3_det_context_conv2_bn, rf_c3_det_context_conv3_2_bn], 3, name = 'rf_c3_det_concat')
    rf_c2_det_context_conv1_relu = tf.nn.relu(rf_c2_det_context_conv1_bn, name = 'rf_c2_det_context_conv1_relu')
    plus1           = rf_c1_red_conv_relu + crop1
    rf_c3_det_concat_relu = tf.nn.relu(rf_c3_det_concat, name = 'rf_c3_det_concat_relu')
    rf_c2_det_context_conv2_pad = tf.pad(rf_c2_det_context_conv1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c2_det_context_conv2 = convolution(rf_c2_det_context_conv2_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c2_det_context_conv2')
    rf_c2_det_context_conv3_1_pad = tf.pad(rf_c2_det_context_conv1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c2_det_context_conv3_1 = convolution(rf_c2_det_context_conv3_1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c2_det_context_conv3_1')
    rf_c1_aggr_pad  = tf.pad(plus1, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c1_aggr      = convolution(rf_c1_aggr_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c1_aggr')
    face_rpn_cls_score_stride32 = convolution(rf_c3_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_cls_score_stride32')
    face_rpn_bbox_pred_stride32 = convolution(rf_c3_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_bbox_pred_stride32')
    face_rpn_landmark_pred_stride32 = convolution(rf_c3_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_landmark_pred_stride32')
    rf_c2_det_context_conv2_bn = batch_normalization(rf_c2_det_context_conv2, variance_epsilon=1.9999999494757503e-05, name='rf_c2_det_context_conv2_bn')
    rf_c2_det_context_conv3_1_bn = batch_normalization(rf_c2_det_context_conv3_1, variance_epsilon=1.9999999494757503e-05, name='rf_c2_det_context_conv3_1_bn')
    rf_c1_aggr_bn   = batch_normalization(rf_c1_aggr, variance_epsilon=1.9999999494757503e-05, name='rf_c1_aggr_bn')
    face_rpn_cls_score_reshape_stride32 = tf.reshape(face_rpn_cls_score_stride32, [tf.shape(face_rpn_cls_score_stride32)[0], -1, tf.shape(face_rpn_cls_score_stride32)[2], 2], 'face_rpn_cls_score_reshape_stride32')
    rf_c2_det_context_conv3_1_relu = tf.nn.relu(rf_c2_det_context_conv3_1_bn, name = 'rf_c2_det_context_conv3_1_relu')
    rf_c1_aggr_relu = tf.nn.relu(rf_c1_aggr_bn, name = 'rf_c1_aggr_relu')
    face_rpn_cls_prob_stride32 = tf.nn.softmax(face_rpn_cls_score_reshape_stride32, name = 'face_rpn_cls_prob_stride32')
    rf_c2_det_context_conv3_2_pad = tf.pad(rf_c2_det_context_conv3_1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c2_det_context_conv3_2 = convolution(rf_c2_det_context_conv3_2_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c2_det_context_conv3_2')
    rf_c1_det_conv1_pad = tf.pad(rf_c1_aggr_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c1_det_conv1 = convolution(rf_c1_det_conv1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c1_det_conv1')
    rf_c1_det_context_conv1_pad = tf.pad(rf_c1_aggr_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c1_det_context_conv1 = convolution(rf_c1_det_context_conv1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c1_det_context_conv1')
    face_rpn_cls_prob_reshape_stride32 = tf.reshape(face_rpn_cls_prob_stride32, [tf.shape(face_rpn_cls_prob_stride32)[0], -1, tf.shape(face_rpn_cls_prob_stride32)[2], 4], 'face_rpn_cls_prob_reshape_stride32')
    rf_c2_det_context_conv3_2_bn = batch_normalization(rf_c2_det_context_conv3_2, variance_epsilon=1.9999999494757503e-05, name='rf_c2_det_context_conv3_2_bn')
    rf_c1_det_conv1_bn = batch_normalization(rf_c1_det_conv1, variance_epsilon=1.9999999494757503e-05, name='rf_c1_det_conv1_bn')
    rf_c1_det_context_conv1_bn = batch_normalization(rf_c1_det_context_conv1, variance_epsilon=1.9999999494757503e-05, name='rf_c1_det_context_conv1_bn')
    rf_c2_det_concat = tf.concat([rf_c2_det_conv1_bn, rf_c2_det_context_conv2_bn, rf_c2_det_context_conv3_2_bn], 3, name = 'rf_c2_det_concat')
    rf_c1_det_context_conv1_relu = tf.nn.relu(rf_c1_det_context_conv1_bn, name = 'rf_c1_det_context_conv1_relu')
    rf_c2_det_concat_relu = tf.nn.relu(rf_c2_det_concat, name = 'rf_c2_det_concat_relu')
    rf_c1_det_context_conv2_pad = tf.pad(rf_c1_det_context_conv1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c1_det_context_conv2 = convolution(rf_c1_det_context_conv2_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c1_det_context_conv2')
    rf_c1_det_context_conv3_1_pad = tf.pad(rf_c1_det_context_conv1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c1_det_context_conv3_1 = convolution(rf_c1_det_context_conv3_1_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c1_det_context_conv3_1')
    face_rpn_cls_score_stride16 = convolution(rf_c2_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_cls_score_stride16')
    face_rpn_bbox_pred_stride16 = convolution(rf_c2_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_bbox_pred_stride16')
    face_rpn_landmark_pred_stride16 = convolution(rf_c2_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_landmark_pred_stride16')
    rf_c1_det_context_conv2_bn = batch_normalization(rf_c1_det_context_conv2, variance_epsilon=1.9999999494757503e-05, name='rf_c1_det_context_conv2_bn')
    rf_c1_det_context_conv3_1_bn = batch_normalization(rf_c1_det_context_conv3_1, variance_epsilon=1.9999999494757503e-05, name='rf_c1_det_context_conv3_1_bn')
    face_rpn_cls_score_reshape_stride16 = tf.reshape(face_rpn_cls_score_stride16, [tf.shape(face_rpn_cls_score_stride16)[0], -1, tf.shape(face_rpn_cls_score_stride16)[2], 2], 'face_rpn_cls_score_reshape_stride16')
    rf_c1_det_context_conv3_1_relu = tf.nn.relu(rf_c1_det_context_conv3_1_bn, name = 'rf_c1_det_context_conv3_1_relu')
    face_rpn_cls_prob_stride16 = tf.nn.softmax(face_rpn_cls_score_reshape_stride16, name = 'face_rpn_cls_prob_stride16')
    rf_c1_det_context_conv3_2_pad = tf.pad(rf_c1_det_context_conv3_1_relu, paddings = [[0, 0], [1, 1], [1, 1], [0, 0]])
    rf_c1_det_context_conv3_2 = convolution(rf_c1_det_context_conv3_2_pad, group=1, strides=[1, 1], padding='VALID', name='rf_c1_det_context_conv3_2')
    face_rpn_cls_prob_reshape_stride16 = tf.reshape(face_rpn_cls_prob_stride16, [tf.shape(face_rpn_cls_prob_stride16)[0], -1, tf.shape(face_rpn_cls_prob_stride16)[2], 4], 'face_rpn_cls_prob_reshape_stride16')
    rf_c1_det_context_conv3_2_bn = batch_normalization(rf_c1_det_context_conv3_2, variance_epsilon=1.9999999494757503e-05, name='rf_c1_det_context_conv3_2_bn')
    rf_c1_det_concat = tf.concat([rf_c1_det_conv1_bn, rf_c1_det_context_conv2_bn, rf_c1_det_context_conv3_2_bn], 3, name = 'rf_c1_det_concat')
    rf_c1_det_concat_relu = tf.nn.relu(rf_c1_det_concat, name = 'rf_c1_det_concat_relu')
    face_rpn_cls_score_stride8 = convolution(rf_c1_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_cls_score_stride8')
    face_rpn_bbox_pred_stride8 = convolution(rf_c1_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_bbox_pred_stride8')
    face_rpn_landmark_pred_stride8 = convolution(rf_c1_det_concat_relu, group=1, strides=[1, 1], padding='VALID', name='face_rpn_landmark_pred_stride8')
    face_rpn_cls_score_reshape_stride8 = tf.reshape(face_rpn_cls_score_stride8, [tf.shape(face_rpn_cls_score_stride8)[0], -1, tf.shape(face_rpn_cls_score_stride8)[2], 2], 'face_rpn_cls_score_reshape_stride8')
    face_rpn_cls_prob_stride8 = tf.nn.softmax(face_rpn_cls_score_reshape_stride8, name = 'face_rpn_cls_prob_stride8')
    face_rpn_cls_prob_reshape_stride8 = tf.reshape(face_rpn_cls_prob_stride8, [tf.shape(face_rpn_cls_prob_stride8)[0], -1, tf.shape(face_rpn_cls_prob_stride8)[2], 4], 'face_rpn_cls_prob_reshape_stride8')
    return [data], [face_rpn_cls_prob_reshape_stride32, face_rpn_bbox_pred_stride32, face_rpn_landmark_pred_stride32, face_rpn_cls_prob_reshape_stride16, face_rpn_bbox_pred_stride16, face_rpn_landmark_pred_stride16, face_rpn_cls_prob_reshape_stride8, face_rpn_bbox_pred_stride8, face_rpn_landmark_pred_stride8]

def convolution(input, name, group, **kwargs):
    w = tf.Variable(__weights_dict[name]['weights'], trainable=is_train, name=name + "_weight")
    if group == 1:
        layer = tf.nn.convolution(input, w, name=name, **kwargs)
    else:
        weight_groups = tf.split(w, num_or_size_splits=group, axis=-1)
        xs = tf.split(input, num_or_size_splits=group, axis=-1)
        convolved = [tf.nn.convolution(x, weight, name=name, **kwargs) for
                    (x, weight) in zip(xs, weight_groups)]
        layer = tf.concat(convolved, axis=-1)

    if 'bias' in __weights_dict[name]:
        b = tf.Variable(__weights_dict[name]['bias'], trainable=is_train, name=name + "_bias")
        layer = layer + b
    return layer

def depthwise_convolution(input, name, **kwargs):
    depthwise = tf.Variable(__weights_dict[name]['weights'], trainable = is_train, name = name + "_df")
    layer = tf.nn.depthwise_conv2d(input, depthwise, **kwargs)
    if 'bias' in __weights_dict[name]:
        b = tf.Variable(__weights_dict[name]['bias'], trainable = is_train, name = name + "_bias")
        layer = layer + b
    return layer

def batch_normalization(input, name, **kwargs):
    mean = tf.Variable(__weights_dict[name]['mean'], name = name + "_mean", trainable = is_train)
    variance = tf.Variable(__weights_dict[name]['var'], name = name + "_var", trainable = is_train)
    offset = tf.Variable(__weights_dict[name]['bias'], name = name + "_bias", trainable = is_train) if 'bias' in __weights_dict[name] else None
    scale = tf.Variable(__weights_dict[name]['scale'], name = name + "_scale", trainable = is_train) if 'scale' in __weights_dict[name] else None
    return tf.nn.batch_normalization(input, mean, variance, offset, scale, name = name, **kwargs)


